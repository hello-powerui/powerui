generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ColorPalette {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?
  colors      Json
  isBuiltIn   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isBuiltIn])
  @@index([userId, name])
}

model GeneratedTheme {
  id            String   @id @default(uuid())
  themeId       String
  generatedJson Json
  version       String
  createdAt     DateTime @default(now())
  theme         Theme    @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@index([themeId, createdAt])
}

model NeutralPalette {
  id        String   @id @default(uuid())
  userId    String?
  name      String
  colors    Json
  isBuiltIn Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isBuiltIn])
  @@index([userId, name])
}

model Theme {
  id              String           @id @default(uuid())
  userId          String
  name            String
  description     String?
  themeData       Json
  version         String           @default("2.0")
  isDefault       Boolean          @default(false)
  organizationId  String?
  visibility      ThemeVisibility  @default(PRIVATE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  generatedThemes GeneratedTheme[]
  organization    Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedWith      ThemeShare[]

  @@index([userId, createdAt])
  @@index([organizationId])
}

model User {
  id                      String               @id
  email                   String               @unique
  username                String?              @unique
  plan                    UserPlan             @default(PRO)
  stripeCustomerId        String?              @unique
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  colorPalettes           ColorPalette[]
  neutralPalettes         NeutralPalette[]
  organizationMemberships OrganizationMember[]
  purchase                Purchase?
  themes                  Theme[]
}

model Organization {
  id         String               @id @default(uuid())
  clerkOrgId String               @unique
  name       String
  seats      Int
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  members    OrganizationMember[]
  purchase   Purchase?
  themes     Theme[]
}

model OrganizationMember {
  id             String           @id @default(uuid())
  organizationId String
  userId         String
  role           OrganizationRole @default(MEMBER)
  createdAt      DateTime         @default(now())
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([userId])
}

model Purchase {
  id               String         @id @default(uuid())
  userId           String?        @unique
  organizationId   String?        @unique
  stripeCustomerId String
  stripePaymentId  String         @unique
  stripePriceId    String
  amount           Int
  currency         String         @default("usd")
  plan             PurchasePlan
  seats            Int?
  status           PurchaseStatus @default(PENDING)
  createdAt        DateTime       @default(now())
  organization     Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user             User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
}

model ThemeShare {
  id         String   @id @default(uuid())
  themeId    String
  sharedBy   String
  sharedWith String
  createdAt  DateTime @default(now())
  theme      Theme    @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@unique([themeId, sharedWith])
  @@index([sharedWith])
}

enum UserPlan {
  PRO
  TEAM
}

enum PurchasePlan {
  PRO
  TEAM_5
  TEAM_10
}

enum OrganizationRole {
  ADMIN
  MEMBER
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ThemeVisibility {
  PRIVATE
  ORGANIZATION
  PUBLIC
}
